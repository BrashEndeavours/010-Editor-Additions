//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: SSD.bt
//    Author: Andrew McRae
//   Version: 0.4
//   Purpose: Parse BBC DFS SSD files
//  Category: Drives
// File Mask: *.ssd
//   History: 
//   0.4   2016-04-05 Andrew McRae: Further handling of truncated images
//   0.3   2016-03-30 Andrew McRae: Updated header for repo
//   0.2   2016-03-09 Andrew McRae: Merge changes
//   0.1   2016-02-25 Andrew McRae: Initial revision
//------------------------------------------------

typedef uint64 u8;
typedef uint32 u4;
typedef uint16 u2;
typedef ubyte  u1;
typedef int64  s8;
typedef int32  s4;
typedef int16  s2;
typedef byte   s1;

quad ext18(quad lo, quad hi) {
    local quad out;
    out = lo;
    out |= (quad)hi << 16;
    return out;
}

quad ext10(quad lo, quad hi) {
    local quad out;
    out = lo;
    out |= (quad)hi << 8;
    return out;
}

quad ext18addr(quad lo, quad hi) {
    local quad out;
    out = ext18(lo, hi);
    if (hi == 0x3) {
        out |= 0xff0000;
    }
    return out;
}

typedef struct {
    char name0 : 7;
    u1 hi0 : 1;
    char name1 : 7;
    u1 hi1 : 1;
    char name2 : 7;
    u1 hi2 : 1;
    char name3 : 7;
    u1 hi3 : 1;
    char name4 : 7;
    u1 hi4 : 1;
    char name5 : 7;
    u1 hi5 : 1;
    char name6 : 7;
    u1 hi6 : 1;

    char dir : 7;
    u1 locked : 1;
} FILE_NAME <read=read_FILE_NAME>;
string read_FILE_NAME(FILE_NAME &in) {
    local string out;
    local char name[7];
    name[0] = in.name0;
    name[1] = in.name1;
    name[2] = in.name2;
    name[3] = in.name3;
    name[4] = in.name4;
    name[5] = in.name5;
    name[6] = in.name6;

    SPrintf(out, "%c.%s%s", in.dir, name, in.locked?" L":"");
    return out;
}

typedef struct {
    u2 load_lo;
    u2 execute_lo;
    u2 length_lo;
    u1 start_hi : 2;
    u1 load_hi : 2;
    u1 length_hi : 2;
    u1 execute_hi : 2;
    u1 start_lo;
} FILE_DETAILS <read=read_FILE_DETAILS>;
string read_FILE_DETAILS(FILE_DETAILS &in) {
    local string out;
    SPrintf(out, "%06X %06X %06X %03X",
        ext18addr(in.load_lo, in.load_hi), ext18addr(in.execute_lo, in.execute_hi),
        ext18(in.length_lo, in.length_hi), ext10(in.start_lo, in.start_hi));
    return out;
}

typedef struct {
    char title1[8];
    FILE_NAME fn[31];
    char title2[4];
    u1 cycle <format=hex>;
    u1 count <format=hex>;
    u1 sectors_hi : 2;
    u1 nondfs : 2;
    enum<u1> {O_NONE, O_LOAD, O_RUN, O_EXEC} opt4 : 2;
    u1 unused : 2 <hidden=true>;
    u1 sectors_lo;
    FILE_DETAILS fd[31];
} CATALOGUE <read=read_CATALOGUE>;
string read_CATALOGUE(CATALOGUE &in) {
    local string out;
    SPrintf(out, "%s%s %d", in.title1, in.title2, in.count / 8);
    return out;
}

typedef struct (int index) {
    local quad _pos;
    _pos = FTell();

    FSeek(index * 8 + 8);
    SetBackColor(0xe0e0e0);
    FILE_NAME n;

    FSeek(index * 8 + 8 + 0x100);
    SetBackColor(0xe0e0e0);
    FILE_DETAILS d;

    local u4 _start, _length, _padding;
    _start = ext10(d.start_lo, d.start_hi) * 0x100;
    _length = ext18(d.length_lo, d.length_hi);

    FSeek(_pos);

    if (_length > 0 && _start < _size) {
        if ((_start + _length) <= _size) {
            SetBackColor(0xc0ffc0);
            u1 data[_length];

            if (_length & 0xff) {
                _padding = 0x100 - _length & 0xff;
                if (_start + _length + _padding > _size) {
                    _padding = _size - _start - _length;
                }
                if (_padding > 0) {
                    SetBackColor(0xf0fff0);
                    u1 padding[_padding] <hidden=true>;
                }
            }
        } else {
            SetBackColor(0xf0fff0);
            u1 data[_size - _start] <hidden=true>;
        }
    } else {
        SetBackColor(0xc0c0c0);
        u1 data[1] <hidden=true>;
    }
} FILE <read=read_FILE,optimize=false>;
string read_FILE(FILE &in) {
    return read_FILE_NAME(in.n);
}

local int i;
local quad _start, _length, _size;

_size = FileSize();

DisplayFormatHex();
LittleEndian();

SetBackColor(0xc0c0c0);
CATALOGUE c;

for (i = 0; i < c.count / 8; i++) {
    _start = ext10(c.fd[i].start_lo, c.fd[i].start_hi) * 0x100;
    _length = ext18(c.fd[i].length_lo, c.fd[i].length_hi);

    if (_start < _size) {
        if (_start + _length > _size) {
            Warning("file end > image size: %d > %d", _start + _length, _size);
            Printf("file end > image size: %d > %d\n", _start + _length, _size);
        }
        FSeek(_start);
    } else {
        Warning("file start > image size: %d > %d", _start, _size);
        Printf("file start > image size: %d > %d\n", _start, _size);
        FSeek(0);
    }
    FILE f(i);
}
